#!/bin/bash

if [ -f /etc/default/autoredisbackup ] ; then
  . /etc/default/autoredisbackup
fi

##########
# PARAMS #
##########

# Redis DB directory location e.g /var/lib/redis
REDIS_DB_DIR=${REDIS_DB_DIR:-"/var/lib/redis"}

# Backup directory location e.g /var/backups
BACKUP_DIR=${BACKUP_DIR:-"/var/backups/redis"}

# Mail setup
# What would you like to be mailed to you?
# - log   : send only log file
# - stdout : will simply output the log to the screen if run manually.
# - quiet : Only send logs if an error occurs to the MAILADDR.
MAILCONTENT=${MAILCONTENT:-"stdout"}

# Email Address to send mail to? (user@domain.com)
MAILADDR=${MAILADDR:-"user@domain.com"}

# Which day do you want weekly backups? (1 to 7 where 1 is Monday)
DOWEEKLY=${DOWEEKLY:-6}

# Additionally keep a copy of the most recent backup in a seperate directory.
LATEST=${LATEST:-no}

#############
# FUNCTIONS #
#############

# Database dump function
dbdump () {
  echo Save Redis DB
  redis-cli save
  echo Rsync Redis DB
  rsync -aPh "$REDIS_DB_DIR/dump.rdb" $1
  chmod 600 $1
  chown root\: $1
  return 0
}

########
# MAIN #
########

PATH=/usr/local/bin:/usr/bin:/bin
HOST=`hostname`               # Hostname
DATE=`date +%Y-%m-%d_%Hh%Mm`  # Datestamp e.g 2002-09-21
DOW=`date +%A`                # Day of the week e.g. Monday
DNOW=`date +%u`               # Day number of the week 1 to 7 where 1 represents Monday
DOM=`date +%d`                # Date of the Month e.g. 27
M=`date +%B`                  # Month e.g January
W=`date +%V`                  # Week Number e.g 37
VER=1.0                       # Version Number

LOGFILE=$BACKUP_DIR/redis-`date +%N`.log         # Logfile Name
LOGERR=$BACKUP_DIR/ERRORS_REDIS-`date +%N`.log   # Logfile Name

# Create required directories
# Check Backup Directory exists.
if [ ! -e "$BACKUP_DIR" ]; then
  mkdir -p "$BACKUP_DIR"
fi

chmod o-x ${BACKUP_DIR}
chmod o-r ${BACKUP_DIR}

# Check Daily Directory exists.
if [ ! -e "$BACKUP_DIR/daily" ]; then
  mkdir -p "$BACKUP_DIR/daily"
fi

# Check Weekly Directory exists.
if [ ! -e "$BACKUP_DIR/weekly" ]; then
  mkdir -p "$BACKUP_DIR/weekly"
fi

# Check Monthly Directory exists.
if [ ! -e "$BACKUP_DIR/monthly" ]; then
  mkdir -p "$BACKUP_DIR/monthly"
fi

# Check Latest Directory exists.
if [ "$LATEST" = "yes" ]; then
  if [ ! -e "$BACKUP_DIR/latest" ]; then
    mkdir -p "$BACKUP_DIR/latest"
  fi
  rm -f "$BACKUP_DIR"/latest/*
fi

# IO redirection for logging.
touch $LOGFILE
exec 6>&1           # Link file descriptor #6 with stdout.
                    # Saves stdout.
exec > $LOGFILE     # stdout replaced with file $LOGFILE.
touch $LOGERR
exec 7>&2           # Link file descriptor #7 with stderr.
                    # Saves stderr.
exec 2> $LOGERR     # stderr replaced with file $LOGERR.

# Backup!
echo ======================================================================
echo AutoRedisBackup VER $VER
echo https://github.com/jbox-web/autoredisbackup
echo
echo Backup of Redis Server
echo ======================================================================

echo Backup Start `date`
echo ======================================================================

# Monthly Full Backup of all Databases
if [ "$DOM" = "01" ]; then
  echo Monthly Backup of Databases
  dbdump "$BACKUP_DIR/monthly/$DATE.$M.all-databases.rdb"
  echo ----------------------------------------------------------------------
fi

# Weekly Backup
if [ "$DNOW" = "$DOWEEKLY" ]; then
  echo Weekly Backup of Databases
  echo

  echo Rotating 5 weeks Backups...
  if [ "$W" -le 05 ]; then
    REMW=`expr 48 + $W`
  elif [ "$W" -lt 15 ]; then
    REMW=0`expr $W - 5`
  else
    REMW=`expr $W - 5`
  fi
  rm -fv "$BACKUP_DIR/weekly/week.$REMW".*

  echo
  dbdump "$BACKUP_DIR/weekly/week.$W.$DATE.rdb"
  echo ----------------------------------------------------------------------

# Daily Backup
else
  echo Daily Backup of Databases
  echo

  echo Rotating last weeks Backup...
  rm -fv "$BACKUP_DIR"/daily/*."$DOW.rdb".*

  echo
  dbdump "$BACKUP_DIR/daily/$DATE.$DOW.rdb"
  echo ----------------------------------------------------------------------
fi

echo Backup End Time `date`
echo ======================================================================

echo Total disk space used for backup storage..
echo Size - Location
echo `du -hs "$BACKUP_DIR"`
echo
echo ======================================================================

# Clean up IO redirection
exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.
exec 1>&7 7>&-      # Restore stdout and close file descriptor #7.

# Send mail report
if [ "$MAILCONTENT" = "log" ]; then
  cat "$LOGFILE" | mail -s "Redis Backup Log for $HOST - $DATE" $MAILADDR
  if [ -s "$LOGERR" ]; then
    cat "$LOGERR" | mail -s "ERRORS REPORTED: Redis Backup error Log for $HOST - $DATE" $MAILADDR
  fi

elif [ "$MAILCONTENT" = "quiet" ]; then
  if [ -s "$LOGERR" ]; then
    cat "$LOGERR" | mail -s "ERRORS REPORTED: Redis Backup error Log for $HOST - $DATE" $MAILADDR
    cat "$LOGFILE" | mail -s "Redis Backup Log for $HOST - $DATE" $MAILADDR
  fi

else
  if [ -s "$LOGERR" ]; then
    cat "$LOGFILE"
    echo
    echo "###### WARNING ######"
    echo "Errors reported during AutoRedisBackup execution.. Backup failed"
    echo "Error log below.."
    cat "$LOGERR"
  else
    cat "$LOGFILE"
  fi
fi

# Compute exit status
if [ -s "$LOGERR" ]; then
  STATUS=1
else
  STATUS=0
fi

# Clean up Logfile
rm -f "$LOGFILE"
rm -f "$LOGERR"

exit $STATUS
